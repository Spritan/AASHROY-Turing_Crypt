"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const results_1 = require("../results");
describe('results', () => {
    describe('all results OK', () => {
        it('should indicate all results are OK', () => __awaiter(void 0, void 0, void 0, function* () {
            const rawResults = [
                {
                    bin: 'mvn',
                    satisfies: true,
                },
            ];
            const result = results_1.isAllOK(rawResults);
            expect(result).toBe(true);
        }));
        it('should indicate all results are OK', () => __awaiter(void 0, void 0, void 0, function* () {
            const rawResults = [
                {
                    bin: 'mvn',
                    satisfies: false,
                },
            ];
            const result = results_1.isAllOK(rawResults);
            expect(result).toBe(false);
        }));
    });
    describe('custom messages', () => {
        it('should return messages', () => __awaiter(void 0, void 0, void 0, function* () {
            const rawResults = [
                {
                    bin: 'mvn',
                    installed: false,
                    installMessage: '<mvn install instructions>',
                },
                {
                    bin: 'nginx',
                    satisfies: false,
                    updateMessage: '<nginx update instructions>',
                },
            ];
            const result = results_1.getMessages(rawResults);
            const expectation = [
                { bin: 'mvn', message: '<mvn install instructions>' },
                { bin: 'nginx', message: '<nginx update instructions>' },
            ];
            expect(result).toEqual(expectation);
        }));
    });
});
