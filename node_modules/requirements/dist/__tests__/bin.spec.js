"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const bin_1 = require("../bin");
describe('bin', () => {
    let logSpy;
    let debugSpy;
    beforeEach(() => {
        logSpy = jest.spyOn(console, 'log');
        debugSpy = jest.spyOn(console, 'debug');
        jest.resetAllMocks();
    });
    it('should execute ok tests', () => __awaiter(void 0, void 0, void 0, function* () {
        yield bin_1.exec({ config: './tests/ok_every.config.js' });
        expect(logSpy).toHaveBeenNthCalledWith(1, '🔍  Checking software requirements...');
        expect(logSpy).toHaveBeenNthCalledWith(3, '✅  All is well!');
    }));
    it('should execute nok tests', () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            yield bin_1.exec({ config: './tests/ok_some.config.js' });
        }
        catch (err) {
            expect(err).toMatchInlineSnapshot(`[Error: ❌  Not all requirements are satisfied]`);
        }
    }));
    it('should execute nok --force tests', () => __awaiter(void 0, void 0, void 0, function* () {
        yield bin_1.exec({ config: './tests/ok_some.config.js', force: true });
        expect(logSpy).toHaveBeenNthCalledWith(3, '⚠️  Not all requirements are satisfied (--force)');
    }));
    it('should print debug data with --debug', () => __awaiter(void 0, void 0, void 0, function* () {
        yield bin_1.exec({ config: './tests/ok_every.config.js', debug: true });
        expect(debugSpy).toHaveBeenCalled();
    }));
    it('should scaffold with --init', () => __awaiter(void 0, void 0, void 0, function* () {
        const filePath = './requirements.config.js';
        yield bin_1.exec({ init: true });
        expect(fs.existsSync(filePath)).toBe(true);
        // clean up
        fs.unlinkSync(filePath);
    }));
});
