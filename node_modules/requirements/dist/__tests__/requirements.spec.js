"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const requirements_1 = require("../requirements");
describe('requirements', () => {
    describe('checkSoftware()', () => {
        it('should check for valid software', () => __awaiter(void 0, void 0, void 0, function* () {
            const softwareConfig = { node: '*' };
            const result = yield requirements_1.checkSoftware(softwareConfig);
            const [expected] = result;
            expect(expected.bin).toEqual('node');
            expect(expected.installed).toEqual(true);
            expect(expected.semver).toEqual('*');
            expect(expected.version).toBeDefined();
            expect(expected.satisfies).toEqual(true);
        }));
        it('should check for valid software with flag', () => __awaiter(void 0, void 0, void 0, function* () {
            const softwareConfig = {
                node: { semver: '*', flag: '--version' },
            };
            const result = yield requirements_1.checkSoftware(softwareConfig);
            const [expected] = result;
            expect(expected.bin).toEqual('node');
            expect(expected.installed).toEqual(true);
            expect(expected.semver).toEqual('*');
            expect(expected.version).toBeDefined();
            expect(expected.satisfies).toEqual(true);
        }));
        it('should check for not installed software', () => __awaiter(void 0, void 0, void 0, function* () {
            const softwareConfig = { idontexist: '*' };
            const result = yield requirements_1.checkSoftware(softwareConfig);
            const [expected] = result;
            expect(expected.bin).toEqual('idontexist');
            expect(expected.installed).toEqual(false);
            expect(expected.semver).toEqual('*');
            expect(expected.version).toBeUndefined();
            expect(expected.satisfies).toBeFalsy();
        }));
    });
    describe('normalizeConfig()', () => {
        it('should normalize configuration with semver', () => {
            const softwareConfig = {
                node: '*',
            };
            const expected = [{ bin: 'node', semver: '*' }];
            expect(requirements_1.normalizeConfig(softwareConfig)).toEqual(expected);
        });
        it('should normalize configuration with semver and custom flag', () => {
            const softwareConfig = {
                httpd: { semver: '*', flag: '-v' },
            };
            const expected = [{ bin: 'httpd', semver: '*', flag: '-v' }];
            expect(requirements_1.normalizeConfig(softwareConfig)).toEqual(expected);
        });
    });
});
