"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.exec = void 0;
const yargs = require("yargs");
const path = require("path");
const chalk = require("chalk");
const requirements_1 = require("./requirements");
const reporter_1 = require("./reporter");
const scaffold_1 = require("./scaffold");
const results_1 = require("./results");
function exec(_debug_argv_) {
    return __awaiter(this, void 0, void 0, function* () {
        const argv = _debug_argv_ !== null && _debug_argv_ !== void 0 ? _debug_argv_ : getArgv();
        if (argv.init) {
            scaffold_1.scaffold();
            return;
        }
        if (!argv.quiet) {
            console.log(`üîç  Checking software requirements...`);
        }
        const config = getConfiguration(argv);
        let rawResults = yield requirements_1.checkSoftware(config.software);
        const ALL_OK = results_1.isAllOK(rawResults);
        if (argv.debug) {
            console.debug('üëÄ  RAW data:\n', rawResults);
            console.debug('üëÄ  yargs:\n', argv);
        }
        if (!ALL_OK && !argv.force) {
            const messages = results_1.getMessages(rawResults);
            console.error(reporter_1.renderTable(rawResults));
            console.log(reporter_1.renderMessages(messages));
            throw new Error(`‚ùå  Not all requirements are satisfied`);
        }
        if (argv.quiet && ALL_OK) {
            // silent
        }
        else {
            console.log(reporter_1.renderTable(rawResults));
        }
        if (!argv.quiet && ALL_OK) {
            console.log(`‚úÖ  All is well!`);
        }
        if (argv.force && !ALL_OK) {
            console.log(`‚ö†Ô∏è  Not all requirements are satisfied (--force)`);
        }
    });
}
exports.exec = exec;
function getArgv() {
    return yargs
        .help('help')
        .alias('help', 'h')
        .version('version', require('../package.json').version)
        .alias('version', 'v')
        .options({
        init: {
            description: 'Create a requirements.config.js file',
            alias: 'i',
        },
        config: {
            description: 'Path to the configuration file',
            default: 'requirements.config.js',
            alias: 'c',
        },
        force: {
            description: 'Succeeds even if not all requirements are satisfied',
            default: false,
            boolean: true,
            alias: 'f',
        },
        quiet: {
            description: 'Only output when errors are present',
            boolean: true,
            alias: 'q',
        },
        debug: {
            description: 'Print raw data',
            boolean: true,
        },
    }).argv;
}
function getConfiguration(argv) {
    const cwd = process.cwd();
    const configPath = argv.config;
    let pathConfiguration;
    const isAbsoluteConfigPath = configPath && /^[~/]/.exec(configPath) ? true : false;
    if (isAbsoluteConfigPath) {
        const homeDir = require('os').homedir();
        pathConfiguration =
            configPath[0] === '~' ? path.join(homeDir, configPath.slice(1)) : configPath;
    }
    else {
        pathConfiguration = path.join(cwd, configPath);
    }
    try {
        return require(pathConfiguration);
    }
    catch (err) {
        throw new Error(`‚ùå  Unable to find configuration file: '${chalk.bold(pathConfiguration)}'`);
    }
}
