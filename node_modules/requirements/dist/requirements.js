"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeConfig = exports.getVersionData = exports.satisifies = exports.checkSoftware = void 0;
const binVersion = require("bin-version");
const semver = require("semver");
function checkSoftware(software = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const softwareList = normalizeConfig(software);
        const softwareData = yield getVersionData(softwareList);
        const softwareSatisifies = satisifies(softwareData);
        const results = softwareSatisifies;
        return results;
    });
}
exports.checkSoftware = checkSoftware;
function satisifies(entries = []) {
    return entries.map((item) => {
        if (item.installed) {
            const satisfies = semver.satisfies(item.version, item.semver);
            return Object.assign(Object.assign({}, item), { satisfies });
        }
        else {
            return Object.assign(Object.assign({}, item), { satisfies: undefined });
        }
    });
}
exports.satisifies = satisifies;
function getVersionData(softwareList = []) {
    return __awaiter(this, void 0, void 0, function* () {
        const results = [];
        for (const software of softwareList) {
            let result = Object.assign({}, software);
            try {
                const maybeBinVersionArgs = software.flag ? { args: [software.flag] } : undefined;
                const version = yield binVersion(software.bin, maybeBinVersionArgs);
                result = Object.assign(Object.assign({}, result), { installed: true, version });
            }
            catch (err) {
                result = Object.assign(Object.assign({}, result), { installed: false, version: undefined });
            }
            results.push(result);
        }
        return results;
    });
}
exports.getVersionData = getVersionData;
function normalizeConfig(software) {
    const results = [];
    for (const [bin, semver] of Object.entries(software)) {
        const item = typeof semver === 'string' ? { bin, semver } : Object.assign({ bin }, semver);
        results.push(item);
    }
    return results;
}
exports.normalizeConfig = normalizeConfig;
