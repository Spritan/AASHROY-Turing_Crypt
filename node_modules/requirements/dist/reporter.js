"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderTable = exports.renderMessages = void 0;
const table_1 = require("table");
const logSymbols = require("log-symbols");
const chalk = require("chalk");
function renderMessages(messages = []) {
    const result = messages.map(({ bin, message }) => {
        return `${chalk.keyword('orange')(`${bin}`)}:\n${message}\n`;
    });
    return result.join('\n');
}
exports.renderMessages = renderMessages;
function renderTable(rawResults = []) {
    let results = rawResults.map((item) => {
        const { bin, semver, installed, version, satisfies, optional } = item;
        const pass = satisfies
            ? `${logSymbols.success} ${chalk.dim('OK')}`
            : optional
                ? `${logSymbols.warning} ${chalk.dim('NOK (optional)')}`
                : `${logSymbols.error} ${chalk.dim('NOK')}`;
        return {
            bin: optional ? chalk.dim(`${bin}`) : bin,
            version: installed ? chalk.dim(version) : chalk.dim('not installed'),
            pass,
            semver: chalk.dim(semver),
        };
    });
    const tableHeaders = [['software', 'installed', 'passes', 'required']];
    const tableRows = results.map((item) => {
        const { bin, version, pass, semver } = item;
        return [bin, version, pass, semver];
    });
    const tableConfig = {
        border: getColouredBorderCharacters('norc', 'dim'),
    };
    return table_1.table([...tableHeaders, ...tableRows], tableConfig);
}
exports.renderTable = renderTable;
function getColouredBorderCharacters(name, colour) {
    const result = {};
    const borderChars = table_1.getBorderCharacters(name);
    Object.entries(borderChars)
        .map(([key, val]) => [key, chalk[colour](val)])
        .forEach(([key, val]) => (result[key] = val));
    return result;
}
